// Baseline, measured in pixels
// The value should be the same as the font-size value for the html element
// If the html element's font-size is set to 62.5% (of the browser's default font-size of 16px),
// then the variable below would be 10px.
$baseline-px: 16px;

// Ensure there is at least this many pixels
// of vertical padding above and below the text.
$min-line-padding: 2px !default;

// Allows the `adjust-font-size-to` mixin and the `lines-for-font-size` function
// to round the line height to the nearest half line height instead of the
// nearest integral line height to avoid large spacing between lines.
$round-to-nearest-half-line: true !default;

// Adjust a block to have a different font size and line height to maintain the
// rhythm. $lines specifies how many multiples of the baseline rhythm each line
// of this font should use up. It does not have to be an integer, but it
// defaults to the smallest integer that is large enough to fit the font.
// Use $from-size to adjust from a font-size other than the base font-size.
@mixin font-size($size: $font-size, $lines: lines-for-font-size($size)) {
    font-size: $size;
    line-height: $lines * $line-height;
}

@mixin font-size-times($multiplier, $lines: lines-for-font-size($font-size * $multiplier)) {
    @include font-size($multiplier * $font-size, $lines);
}

@mixin font-size-plus($pixels, $lines: lines-for-font-size($font-size + $pixels)) {
    @include font-size($pixels + $font-size, $lines);
}

// Calculate the minimum multiple of rhythm units needed to contain the font-size.
@function lines-for-font-size($font-size) {
    $lines: if($round-to-nearest-half-line,
              ceil(2 * $font-size / $line-height) / 2,
              ceil($font-size / $line-height));
    @if $lines * $line-height - $font-size < $min-line-padding * 2 {
        $lines: $lines + if($round-to-nearest-half-line, 0.5, 1);
    }
    @return $lines;
}

@function lines($lines: 1, $minus: 0) {
    @return $lines * $line-height - $minus;
}

@function gutters($gutters: 1, $minus: 0) {
    @return $gutters * $gutter-width - $minus;
}


// Text overflow
// -------------------------
// Requires inline-block or block for proper styling
@mixin text-overflow() {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}