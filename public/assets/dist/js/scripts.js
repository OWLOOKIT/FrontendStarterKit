"use strict";

/*global jQuery */
/*jshint browser:true */
/*!
* FitVids 1.1
*
* Copyright 2013, Chris Coyier - http://css-tricks.com + Dave Rupert - http://daverupert.com
* Credit to Thierry Koblentz - http://www.alistapart.com/articles/creating-intrinsic-ratios-for-video/
* Released under the WTFPL license - http://sam.zoy.org/wtfpl/
*
*/

(function ($) {

  "use strict";

  $.fn.fitVids = function (options) {
    var settings = {
      customSelector: null
    };

    if (!document.getElementById("fit-vids-style")) {
      // appendStyles: https://github.com/toddmotto/fluidvids/blob/master/dist/fluidvids.js
      var head = document.head || document.getElementsByTagName("head")[0];
      var css = ".fluid-width-video-wrapper{width:100%;position:relative;padding:0;}.fluid-width-video-wrapper iframe,.fluid-width-video-wrapper object,.fluid-width-video-wrapper embed {position:absolute;top:0;left:0;width:100%;height:100%;}";
      var div = document.createElement("div");
      div.innerHTML = "<p>x</p><style id=\"fit-vids-style\">" + css + "</style>";
      head.appendChild(div.childNodes[1]);
    }

    if (options) {
      $.extend(settings, options);
    }

    return this.each(function () {
      var selectors = ["iframe[src*='player.vimeo.com']", "iframe[src*='youtube.com']", "iframe[src*='youtube-nocookie.com']", "iframe[src*='kickstarter.com'][src*='video.html']", "object", "embed"];

      if (settings.customSelector) {
        selectors.push(settings.customSelector);
      }

      var $allVideos = $(this).find(selectors.join(","));
      $allVideos = $allVideos.not("object object"); // SwfObj conflict patch

      $allVideos.each(function () {
        var $this = $(this);
        if (this.tagName.toLowerCase() === "embed" && $this.parent("object").length || $this.parent(".fluid-width-video-wrapper").length) {
          return;
        }
        var height = this.tagName.toLowerCase() === "object" || $this.attr("height") && !isNaN(parseInt($this.attr("height"), 10)) ? parseInt($this.attr("height"), 10) : $this.height(),
            width = !isNaN(parseInt($this.attr("width"), 10)) ? parseInt($this.attr("width"), 10) : $this.width(),
            aspectRatio = height / width;
        if (!$this.attr("id")) {
          var videoID = "fitvid" + Math.floor(Math.random() * 999999);
          $this.attr("id", videoID);
        }
        $this.wrap("<div class=\"fluid-width-video-wrapper\"></div>").parent(".fluid-width-video-wrapper").css("padding-top", aspectRatio * 100 + "%");
        $this.removeAttr("height").removeAttr("width");
      });
    });
  };
  // Works with either jQuery or Zepto
})(window.jQuery || window.Zepto);
"use strict";

(function () {
  x((function (_this) {
    return function () {
      return alert("test");
    };
  })(this));
}).call(undefined);
"use strict";

/**
 * Enables form labels to be overlaid on the inputs
 * Fades them out when the input is selected, and hides
 * when the user begins to type.
 */
(function ($) {

    $.fn.autoHideLabels = function (options) {

        var settings = {
            label: "label",
            input: "textarea, input:not([type=\"checkbox\"], [type=\"radio\"], [type=\"button\"], [type=\"submit\"], [type=\"reset\"], [type=\"file\"], [type=\"hidden\"])"
        };

        if (options) {
            $.extend(settings, options);
        }

        return $(this).each(function () {
            var $this = $(this);

            $this.on("focusin", function () {
                if ($this.find(settings.input).val() === "") {
                    $this.find(settings.label).fadeTo(100, 0.4);
                }
            });

            $this.on("focusout", function () {
                if ($this.find(settings.input).val() === "") {
                    $this.find(settings.label).fadeTo(100, 1);
                }
            });

            $this.on("input keyup", function () {
                if ($this.find(settings.input).val() === "") {
                    $this.find(settings.label).fadeTo(100, 0.4);
                } else {
                    $this.find(settings.label).fadeOut(100);
                }
            });

            if ($this.find(settings.input).val() !== "") {
                $this.find(settings.label).hide();
            }
        });
    };
})(jQuery);
"use strict";

// Avoid `console` errors in browsers that lack a console.
(function () {
    var method;
    var noop = function noop() {};
    var methods = ["assert", "clear", "count", "debug", "dir", "dirxml", "error", "exception", "group", "groupCollapsed", "groupEnd", "info", "log", "markTimeline", "profile", "profileEnd", "table", "time", "timeEnd", "timeline", "timelineEnd", "timeStamp", "trace", "warn"];
    var length = methods.length;
    var console = window.console = window.console || {};

    while (length--) {
        method = methods[length];

        // Only stub undefined methods.
        if (!console[method]) {
            console[method] = noop;
        }
    }
})();
"use strict";

/*
 * Open links to a different domain in a new window
 */
(function (document) {

    var matchExternal = new RegExp("/" + window.location.host + "/"),
        links = document.getElementsByTagName("a");

    for (i = 0; i < links.length; i++) {
        if (!matchExternal.test(links[i].href)) {
            links[i].target = "_blank";
        }
    };
})(document);
"use strict";

if (window.devicePixelRatio >= 1.2) {
    var images = document.getElementsByTagName("img");
    for (var i = 0; i < images.length; i++) {
        var attr = images[i].getAttribute("data-src2x");
        if (attr) {
            images[i].src = attr;
        }
    }
}
"use strict";

// Site-Specific Scripts

var site = {

    init: function init() {

        // Run jQuery plugins
        $(".inplace").autoHideLabels();
    }

};

// Start things off
$(document).ready(site.init);
"use strict";

(function () {
  x((function (_this) {
    return function () {
      return alert("test");
    };
  })(this));
}).call(undefined);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpxdWVyeS5maXR2aWRzLmpzIiwiL3NvdXJjZS9qcy9qcy90ZXN0LmNvZmZlZSIsImpzL3Rlc3QuanMiLCJwbHVnaW5zL2F1dG9IaWRlTGFiZWxzLmpzIiwicGx1Z2lucy9jb25zb2xlLmpzIiwicGx1Z2lucy9leHRlcm5hbExpbmtzLmpzIiwicGx1Z2lucy9yZXRpbmEuanMiLCJzaXRlLmpzIiwiL3NvdXJjZS90ZXN0LmNvZmZlZSIsInRlc3QuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQVdBLENBQUMsVUFBVSxDQUFDLEVBQUU7O0FBRVosY0FBWSxDQUFDOztBQUViLEdBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxHQUFHLFVBQVUsT0FBTyxFQUFHO0FBQ2pDLFFBQUksUUFBUSxHQUFHO0FBQ2Isb0JBQWMsRUFBRSxJQUFJO0tBQ3JCLENBQUM7O0FBRUYsUUFBRyxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsZ0JBQWdCLENBQUMsRUFBRTs7QUFFN0MsVUFBSSxJQUFJLEdBQUcsUUFBUSxDQUFDLElBQUksSUFBSSxRQUFRLENBQUMsb0JBQW9CLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDckUsVUFBSSxHQUFHLEdBQUcsa09BQWtPLENBQUM7QUFDN08sVUFBSSxHQUFHLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUN4QyxTQUFHLENBQUMsU0FBUyxHQUFHLHVDQUFxQyxHQUFHLEdBQUcsR0FBRyxVQUFVLENBQUM7QUFDekUsVUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDckM7O0FBRUQsUUFBSyxPQUFPLEVBQUc7QUFDYixPQUFDLENBQUMsTUFBTSxDQUFFLFFBQVEsRUFBRSxPQUFPLENBQUUsQ0FBQztLQUMvQjs7QUFFRCxXQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBVTtBQUN6QixVQUFJLFNBQVMs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SSxJQUFJLEdBQUc7O0FBRVAsUUFBSSxFQUFFLGdCQUFXOzs7QUFHYixTQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsY0FBYyxFQUFFLENBQUM7S0FFbEM7O0NBRUosQ0FBQzs7O0FBR0YsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7OztBQ2Q3QixDQUFBLFlBQUE7QUFBQSxHQUFBLENBQUUsQ0FBQSxVQUFBLEtBQUEsRUFBQTtBQ0VFLFdERkYsWUFBQTtBQ0dJLGFERkosS0FBQSxDQUFNLE1BQU4sQ0FBQSxDQURBO0tBQUEsQ0FBQTtHQUFBLENBQUEsQ0FBQSxJQUFBLENBQUYsQ0FBQSxDQUFBO0NDT0MsQ0FBQSxDQUFFLElBQUksV0FBTSxDQUFDIiwiZmlsZSI6InNjcmlwdHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKmdsb2JhbCBqUXVlcnkgKi9cbi8qanNoaW50IGJyb3dzZXI6dHJ1ZSAqL1xuLyohXG4qIEZpdFZpZHMgMS4xXG4qXG4qIENvcHlyaWdodCAyMDEzLCBDaHJpcyBDb3lpZXIgLSBodHRwOi8vY3NzLXRyaWNrcy5jb20gKyBEYXZlIFJ1cGVydCAtIGh0dHA6Ly9kYXZlcnVwZXJ0LmNvbVxuKiBDcmVkaXQgdG8gVGhpZXJyeSBLb2JsZW50eiAtIGh0dHA6Ly93d3cuYWxpc3RhcGFydC5jb20vYXJ0aWNsZXMvY3JlYXRpbmctaW50cmluc2ljLXJhdGlvcy1mb3ItdmlkZW8vXG4qIFJlbGVhc2VkIHVuZGVyIHRoZSBXVEZQTCBsaWNlbnNlIC0gaHR0cDovL3NhbS56b3kub3JnL3d0ZnBsL1xuKlxuKi9cblxuKGZ1bmN0aW9uKCAkICl7XG5cbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgJC5mbi5maXRWaWRzID0gZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG4gICAgdmFyIHNldHRpbmdzID0ge1xuICAgICAgY3VzdG9tU2VsZWN0b3I6IG51bGxcbiAgICB9O1xuXG4gICAgaWYoIWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdmaXQtdmlkcy1zdHlsZScpKSB7XG4gICAgICAvLyBhcHBlbmRTdHlsZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS90b2RkbW90dG8vZmx1aWR2aWRzL2Jsb2IvbWFzdGVyL2Rpc3QvZmx1aWR2aWRzLmpzXG4gICAgICB2YXIgaGVhZCA9IGRvY3VtZW50LmhlYWQgfHwgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2hlYWQnKVswXTtcbiAgICAgIHZhciBjc3MgPSAnLmZsdWlkLXdpZHRoLXZpZGVvLXdyYXBwZXJ7d2lkdGg6MTAwJTtwb3NpdGlvbjpyZWxhdGl2ZTtwYWRkaW5nOjA7fS5mbHVpZC13aWR0aC12aWRlby13cmFwcGVyIGlmcmFtZSwuZmx1aWQtd2lkdGgtdmlkZW8td3JhcHBlciBvYmplY3QsLmZsdWlkLXdpZHRoLXZpZGVvLXdyYXBwZXIgZW1iZWQge3Bvc2l0aW9uOmFic29sdXRlO3RvcDowO2xlZnQ6MDt3aWR0aDoxMDAlO2hlaWdodDoxMDAlO30nO1xuICAgICAgdmFyIGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgZGl2LmlubmVySFRNTCA9ICc8cD54PC9wPjxzdHlsZSBpZD1cImZpdC12aWRzLXN0eWxlXCI+JyArIGNzcyArICc8L3N0eWxlPic7XG4gICAgICBoZWFkLmFwcGVuZENoaWxkKGRpdi5jaGlsZE5vZGVzWzFdKTtcbiAgICB9XG5cbiAgICBpZiAoIG9wdGlvbnMgKSB7XG4gICAgICAkLmV4dGVuZCggc2V0dGluZ3MsIG9wdGlvbnMgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7XG4gICAgICB2YXIgc2VsZWN0b3JzID0gW1xuICAgICAgICBcImlmcmFtZVtzcmMqPSdwbGF5ZXIudmltZW8uY29tJ11cIixcbiAgICAgICAgXCJpZnJhbWVbc3JjKj0neW91dHViZS5jb20nXVwiLFxuICAgICAgICBcImlmcmFtZVtzcmMqPSd5b3V0dWJlLW5vY29va2llLmNvbSddXCIsXG4gICAgICAgIFwiaWZyYW1lW3NyYyo9J2tpY2tzdGFydGVyLmNvbSddW3NyYyo9J3ZpZGVvLmh0bWwnXVwiLFxuICAgICAgICBcIm9iamVjdFwiLFxuICAgICAgICBcImVtYmVkXCJcbiAgICAgIF07XG5cbiAgICAgIGlmIChzZXR0aW5ncy5jdXN0b21TZWxlY3Rvcikge1xuICAgICAgICBzZWxlY3RvcnMucHVzaChzZXR0aW5ncy5jdXN0b21TZWxlY3Rvcik7XG4gICAgICB9XG5cbiAgICAgIHZhciAkYWxsVmlkZW9zID0gJCh0aGlzKS5maW5kKHNlbGVjdG9ycy5qb2luKCcsJykpO1xuICAgICAgJGFsbFZpZGVvcyA9ICRhbGxWaWRlb3Mubm90KFwib2JqZWN0IG9iamVjdFwiKTsgLy8gU3dmT2JqIGNvbmZsaWN0IHBhdGNoXG5cbiAgICAgICRhbGxWaWRlb3MuZWFjaChmdW5jdGlvbigpe1xuICAgICAgICB2YXIgJHRoaXMgPSAkKHRoaXMpO1xuICAgICAgICBpZiAodGhpcy50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdlbWJlZCcgJiYgJHRoaXMucGFyZW50KCdvYmplY3QnKS5sZW5ndGggfHwgJHRoaXMucGFyZW50KCcuZmx1aWQtd2lkdGgtdmlkZW8td3JhcHBlcicpLmxlbmd0aCkgeyByZXR1cm47IH1cbiAgICAgICAgdmFyIGhlaWdodCA9ICggdGhpcy50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdvYmplY3QnIHx8ICgkdGhpcy5hdHRyKCdoZWlnaHQnKSAmJiAhaXNOYU4ocGFyc2VJbnQoJHRoaXMuYXR0cignaGVpZ2h0JyksIDEwKSkpICkgPyBwYXJzZUludCgkdGhpcy5hdHRyKCdoZWlnaHQnKSwgMTApIDogJHRoaXMuaGVpZ2h0KCksXG4gICAgICAgICAgICB3aWR0aCA9ICFpc05hTihwYXJzZUludCgkdGhpcy5hdHRyKCd3aWR0aCcpLCAxMCkpID8gcGFyc2VJbnQoJHRoaXMuYXR0cignd2lkdGgnKSwgMTApIDogJHRoaXMud2lkdGgoKSxcbiAgICAgICAgICAgIGFzcGVjdFJhdGlvID0gaGVpZ2h0IC8gd2lkdGg7XG4gICAgICAgIGlmKCEkdGhpcy5hdHRyKCdpZCcpKXtcbiAgICAgICAgICB2YXIgdmlkZW9JRCA9ICdmaXR2aWQnICsgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpKjk5OTk5OSk7XG4gICAgICAgICAgJHRoaXMuYXR0cignaWQnLCB2aWRlb0lEKTtcbiAgICAgICAgfVxuICAgICAgICAkdGhpcy53cmFwKCc8ZGl2IGNsYXNzPVwiZmx1aWQtd2lkdGgtdmlkZW8td3JhcHBlclwiPjwvZGl2PicpLnBhcmVudCgnLmZsdWlkLXdpZHRoLXZpZGVvLXdyYXBwZXInKS5jc3MoJ3BhZGRpbmctdG9wJywgKGFzcGVjdFJhdGlvICogMTAwKStcIiVcIik7XG4gICAgICAgICR0aGlzLnJlbW92ZUF0dHIoJ2hlaWdodCcpLnJlbW92ZUF0dHIoJ3dpZHRoJyk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcbi8vIFdvcmtzIHdpdGggZWl0aGVyIGpRdWVyeSBvciBaZXB0b1xufSkoIHdpbmRvdy5qUXVlcnkgfHwgd2luZG93LlplcHRvICk7XG4iLCJ4ID0+XG4gIGFsZXJ0ICd0ZXN0JyIsIihmdW5jdGlvbigpIHtcbiAgeCgoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gYWxlcnQoJ3Rlc3QnKTtcbiAgICB9O1xuICB9KSh0aGlzKSk7XG5cbn0pLmNhbGwodGhpcyk7XG5cbiIsIi8qKlxuICogRW5hYmxlcyBmb3JtIGxhYmVscyB0byBiZSBvdmVybGFpZCBvbiB0aGUgaW5wdXRzXG4gKiBGYWRlcyB0aGVtIG91dCB3aGVuIHRoZSBpbnB1dCBpcyBzZWxlY3RlZCwgYW5kIGhpZGVzXG4gKiB3aGVuIHRoZSB1c2VyIGJlZ2lucyB0byB0eXBlLlxuICovXG4gKGZ1bmN0aW9uKCAkICkge1xuXG4gICAgJC5mbi5hdXRvSGlkZUxhYmVscyA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcblxuICAgICAgICB2YXIgc2V0dGluZ3MgPSB7XG4gICAgICAgICAgICBsYWJlbDogJ2xhYmVsJyxcbiAgICAgICAgICAgIGlucHV0OiAndGV4dGFyZWEsIGlucHV0Om5vdChbdHlwZT1cImNoZWNrYm94XCJdLCBbdHlwZT1cInJhZGlvXCJdLCBbdHlwZT1cImJ1dHRvblwiXSwgW3R5cGU9XCJzdWJtaXRcIl0sIFt0eXBlPVwicmVzZXRcIl0sIFt0eXBlPVwiZmlsZVwiXSwgW3R5cGU9XCJoaWRkZW5cIl0pJ1xuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChvcHRpb25zKSB7XG4gICAgICAgICAgICAkLmV4dGVuZChzZXR0aW5ncywgb3B0aW9ucyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gJCh0aGlzKS5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyICR0aGlzID0gJCh0aGlzKTtcblxuICAgICAgICAgICAgJHRoaXMub24oJ2ZvY3VzaW4nLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBpZiAoJHRoaXMuZmluZChzZXR0aW5ncy5pbnB1dCkudmFsKCkgPT09ICcnKSB7XG4gICAgICAgICAgICAgICAgICAgICR0aGlzLmZpbmQoc2V0dGluZ3MubGFiZWwpLmZhZGVUbygxMDAsIDAuNCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICR0aGlzLm9uKCdmb2N1c291dCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGlmICgkdGhpcy5maW5kKHNldHRpbmdzLmlucHV0KS52YWwoKSA9PT0gJycpIHtcbiAgICAgICAgICAgICAgICAgICAgJHRoaXMuZmluZChzZXR0aW5ncy5sYWJlbCkuZmFkZVRvKDEwMCwgMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICR0aGlzLm9uKCdpbnB1dCBrZXl1cCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGlmICgkdGhpcy5maW5kKHNldHRpbmdzLmlucHV0KS52YWwoKSA9PT0gJycpIHtcbiAgICAgICAgICAgICAgICAgICAgJHRoaXMuZmluZChzZXR0aW5ncy5sYWJlbCkuZmFkZVRvKDEwMCwgMC40KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAkdGhpcy5maW5kKHNldHRpbmdzLmxhYmVsKS5mYWRlT3V0KDEwMCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmICgkdGhpcy5maW5kKHNldHRpbmdzLmlucHV0KS52YWwoKSAhPT0gJycpIHtcbiAgICAgICAgICAgICAgICAkdGhpcy5maW5kKHNldHRpbmdzLmxhYmVsKS5oaWRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgfTtcblxufSggalF1ZXJ5ICkpOyIsIi8vIEF2b2lkIGBjb25zb2xlYCBlcnJvcnMgaW4gYnJvd3NlcnMgdGhhdCBsYWNrIGEgY29uc29sZS5cbihmdW5jdGlvbigpIHtcbiAgICB2YXIgbWV0aG9kO1xuICAgIHZhciBub29wID0gZnVuY3Rpb24gKCkge307XG4gICAgdmFyIG1ldGhvZHMgPSBbXG4gICAgICAgICdhc3NlcnQnLCAnY2xlYXInLCAnY291bnQnLCAnZGVidWcnLCAnZGlyJywgJ2RpcnhtbCcsICdlcnJvcicsXG4gICAgICAgICdleGNlcHRpb24nLCAnZ3JvdXAnLCAnZ3JvdXBDb2xsYXBzZWQnLCAnZ3JvdXBFbmQnLCAnaW5mbycsICdsb2cnLFxuICAgICAgICAnbWFya1RpbWVsaW5lJywgJ3Byb2ZpbGUnLCAncHJvZmlsZUVuZCcsICd0YWJsZScsICd0aW1lJywgJ3RpbWVFbmQnLFxuICAgICAgICAndGltZWxpbmUnLCAndGltZWxpbmVFbmQnLCAndGltZVN0YW1wJywgJ3RyYWNlJywgJ3dhcm4nXG4gICAgXTtcbiAgICB2YXIgbGVuZ3RoID0gbWV0aG9kcy5sZW5ndGg7XG4gICAgdmFyIGNvbnNvbGUgPSAod2luZG93LmNvbnNvbGUgPSB3aW5kb3cuY29uc29sZSB8fCB7fSk7XG5cbiAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgbWV0aG9kID0gbWV0aG9kc1tsZW5ndGhdO1xuXG4gICAgICAgIC8vIE9ubHkgc3R1YiB1bmRlZmluZWQgbWV0aG9kcy5cbiAgICAgICAgaWYgKCFjb25zb2xlW21ldGhvZF0pIHtcbiAgICAgICAgICAgIGNvbnNvbGVbbWV0aG9kXSA9IG5vb3A7XG4gICAgICAgIH1cbiAgICB9XG59KCkpOyIsIi8qXG4gKiBPcGVuIGxpbmtzIHRvIGEgZGlmZmVyZW50IGRvbWFpbiBpbiBhIG5ldyB3aW5kb3dcbiAqL1xuKGZ1bmN0aW9uKGRvY3VtZW50KSB7XG5cbiAgICB2YXIgbWF0Y2hFeHRlcm5hbCA9IG5ldyBSZWdFeHAoJy8nICsgd2luZG93LmxvY2F0aW9uLmhvc3QgKyAnLycpLFxuICAgICAgICBsaW5rcyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdhJyk7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGlua3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICBpZiAoIW1hdGNoRXh0ZXJuYWwudGVzdChsaW5rc1tpXS5ocmVmKSkge1xuICAgICAgICAgICBsaW5rc1tpXS50YXJnZXQgPSAnX2JsYW5rJztcbiAgICAgICB9XG4gICAgfTtcblxufShkb2N1bWVudCkpOyIsImlmICh3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyA+PSAxLjIpe1xuICAgIHZhciBpbWFnZXMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaW1nJyk7XG4gICAgZm9yIChsZXQgaT0wOyBpIDwgaW1hZ2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBhdHRyID0gaW1hZ2VzW2ldLmdldEF0dHJpYnV0ZSgnZGF0YS1zcmMyeCcpO1xuICAgICAgICBpZiAoYXR0cikge1xuICAgICAgICAgICAgaW1hZ2VzW2ldLnNyYyA9IGF0dHI7XG4gICAgICAgIH1cbiAgICB9XG59IiwiLy8gU2l0ZS1TcGVjaWZpYyBTY3JpcHRzXG5cbnZhciBzaXRlID0ge1xuXG4gICAgaW5pdDogZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgLy8gUnVuIGpRdWVyeSBwbHVnaW5zXG4gICAgICAgICQoJy5pbnBsYWNlJykuYXV0b0hpZGVMYWJlbHMoKTtcblxuICAgIH1cblxufTtcblxuLy8gU3RhcnQgdGhpbmdzIG9mZlxuJChkb2N1bWVudCkucmVhZHkoc2l0ZS5pbml0KTsiLCJ4ID0+XG4gIGFsZXJ0ICd0ZXN0JyIsIihmdW5jdGlvbigpIHtcbiAgeCgoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gYWxlcnQoJ3Rlc3QnKTtcbiAgICB9O1xuICB9KSh0aGlzKSk7XG5cbn0pLmNhbGwodGhpcyk7XG5cbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==