"use strict";

/*global jQuery */
/*jshint browser:true */
/*!
* FitVids 1.1
*
* Copyright 2013, Chris Coyier - http://css-tricks.com + Dave Rupert - http://daverupert.com
* Credit to Thierry Koblentz - http://www.alistapart.com/articles/creating-intrinsic-ratios-for-video/
* Released under the WTFPL license - http://sam.zoy.org/wtfpl/
*
*/

(function ($) {

  "use strict";

  $.fn.fitVids = function (options) {
    var settings = {
      customSelector: null
    };

    if (!document.getElementById("fit-vids-style")) {
      // appendStyles: https://github.com/toddmotto/fluidvids/blob/master/dist/fluidvids.js
      var head = document.head || document.getElementsByTagName("head")[0];
      var css = ".fluid-width-video-wrapper{width:100%;position:relative;padding:0;}.fluid-width-video-wrapper iframe,.fluid-width-video-wrapper object,.fluid-width-video-wrapper embed {position:absolute;top:0;left:0;width:100%;height:100%;}";
      var div = document.createElement("div");
      div.innerHTML = "<p>x</p><style id=\"fit-vids-style\">" + css + "</style>";
      head.appendChild(div.childNodes[1]);
    }

    if (options) {
      $.extend(settings, options);
    }

    return this.each(function () {
      var selectors = ["iframe[src*='player.vimeo.com']", "iframe[src*='youtube.com']", "iframe[src*='youtube-nocookie.com']", "iframe[src*='kickstarter.com'][src*='video.html']", "object", "embed"];

      if (settings.customSelector) {
        selectors.push(settings.customSelector);
      }

      var $allVideos = $(this).find(selectors.join(","));
      $allVideos = $allVideos.not("object object"); // SwfObj conflict patch

      $allVideos.each(function () {
        var $this = $(this);
        if (this.tagName.toLowerCase() === "embed" && $this.parent("object").length || $this.parent(".fluid-width-video-wrapper").length) {
          return;
        }
        var height = this.tagName.toLowerCase() === "object" || $this.attr("height") && !isNaN(parseInt($this.attr("height"), 10)) ? parseInt($this.attr("height"), 10) : $this.height(),
            width = !isNaN(parseInt($this.attr("width"), 10)) ? parseInt($this.attr("width"), 10) : $this.width(),
            aspectRatio = height / width;
        if (!$this.attr("id")) {
          var videoID = "fitvid" + Math.floor(Math.random() * 999999);
          $this.attr("id", videoID);
        }
        $this.wrap("<div class=\"fluid-width-video-wrapper\"></div>").parent(".fluid-width-video-wrapper").css("padding-top", aspectRatio * 100 + "%");
        $this.removeAttr("height").removeAttr("width");
      });
    });
  };
  // Works with either jQuery or Zepto
})(window.jQuery || window.Zepto);
"use strict";

/**
 * Enables form labels to be overlaid on the inputs
 * Fades them out when the input is selected, and hides
 * when the user begins to type.
 */
(function ($) {

    $.fn.autoHideLabels = function (options) {

        var settings = {
            label: "label",
            input: "textarea, input:not([type=\"checkbox\"], [type=\"radio\"], [type=\"button\"], [type=\"submit\"], [type=\"reset\"], [type=\"file\"], [type=\"hidden\"])"
        };

        if (options) {
            $.extend(settings, options);
        }

        return $(this).each(function () {
            var $this = $(this);

            $this.on("focusin", function () {
                if ($this.find(settings.input).val() === "") {
                    $this.find(settings.label).fadeTo(100, 0.4);
                }
            });

            $this.on("focusout", function () {
                if ($this.find(settings.input).val() === "") {
                    $this.find(settings.label).fadeTo(100, 1);
                }
            });

            $this.on("input keyup", function () {
                if ($this.find(settings.input).val() === "") {
                    $this.find(settings.label).fadeTo(100, 0.4);
                } else {
                    $this.find(settings.label).fadeOut(100);
                }
            });

            if ($this.find(settings.input).val() !== "") {
                $this.find(settings.label).hide();
            }
        });
    };
})(jQuery);
"use strict";

// Avoid `console` errors in browsers that lack a console.
(function () {
    var method;
    var noop = function noop() {};
    var methods = ["assert", "clear", "count", "debug", "dir", "dirxml", "error", "exception", "group", "groupCollapsed", "groupEnd", "info", "log", "markTimeline", "profile", "profileEnd", "table", "time", "timeEnd", "timeline", "timelineEnd", "timeStamp", "trace", "warn"];
    var length = methods.length;
    var console = window.console = window.console || {};

    while (length--) {
        method = methods[length];

        // Only stub undefined methods.
        if (!console[method]) {
            console[method] = noop;
        }
    }
})();
"use strict";

/*
 * Open links to a different domain in a new window
 */
(function (document) {

    var matchExternal = new RegExp("/" + window.location.host + "/"),
        links = document.getElementsByTagName("a");

    for (i = 0; i < links.length; i++) {
        if (!matchExternal.test(links[i].href)) {
            links[i].target = "_blank";
        }
    };
})(document);
"use strict";

if (window.devicePixelRatio >= 1.2) {
    var images = document.getElementsByTagName("img");
    for (var i = 0; i < images.length; i++) {
        var attr = images[i].getAttribute("data-src2x");
        if (attr) {
            images[i].src = attr;
        }
    }
}
"use strict";

// Site-Specific Scripts

var site = {

    init: function init() {

        // Run jQuery plugins
        $(".inplace").autoHideLabels();
    }

};

// Start things off
$(document).ready(site.init);
//# sourceMappingURL=data:application/json;base64,