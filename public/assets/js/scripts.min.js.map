{"version":3,"sources":["scripts.js","/source/plugins/autoHideLabels.js","/source/plugins/externalLinks.js","/source/site.js"],"names":["$","fn","autoHideLabels","options","settings","label","input","extend","this","each","$this","on","find","val","fadeTo","fadeOut","hide","jQuery","document","window","externalTest","RegExp","location","host","links","getElementsByTagName","length","i","test","href","target","site","init"],"mappings":"AAKA,cCAA,SAAAA,GACAA,EAAAC,GAAAC,eAAA,SAAAC,GACA,GAAAC,IACAC,MAAA,QACAC,MAAA,2IAOA,OAJAH,IACAH,EAAAO,OAAAH,EAAAD,GAGAH,EAAAQ,MAAAC,KAAA,WACA,GAAAC,GAAAV,EAAAQ,KAEAE,GAAAC,GAAA,UAAA,WACA,KAAAD,EAAAE,KAAAR,EAAAE,OAAAO,OACAH,EAAAE,KAAAR,EAAAC,OAAAS,OAAA,IAAA,MAIAJ,EAAAC,GAAA,WAAA,WACA,KAAAD,EAAAE,KAAAR,EAAAE,OAAAO,OACAH,EAAAE,KAAAR,EAAAC,OAAAS,OAAA,IAAA,KAIAJ,EAAAC,GAAA,cAAA,WACA,KAAAD,EAAAE,KAAAR,EAAAE,OAAAO,MACAH,EAAAE,KAAAR,EAAAC,OAAAS,OAAA,IAAA,IAEAJ,EAAAE,KAAAR,EAAAC,OAAAU,QAAA,OAIA,KAAAL,EAAAE,KAAAR,EAAAE,OAAAO,OACAH,EAAAE,KAAAR,EAAAC,OAAAW,WAIAC,QCzCA,SAAAC,EAAAC,GAKA,IAAA,GAJAC,GAAA,GAAAC,QAAA,IAAAF,EAAAG,SAAAC,KAAA,KACAC,EAAAN,EAAAO,qBAAA,KACAC,EAAAF,EAAAE,OAEAC,EAAA,EAAAD,EAAAC,EAAAA,IACAP,EAAAQ,KAAAJ,EAAAG,GAAAE,QACAL,EAAAG,GAAAG,OAAA,WAGAZ,SAAAC,QCbA,SAAAnB,EAAAkB,GACA,GAAAa,IACAC,KAAA,WAEAhC,EAAA,YAAAE,kBAKA6B,GAAAC,QACAf,OAAAC","file":"scripts.min.js","sourcesContent":["/**\n * Enables form labels to be overlaid on the inputs\n * Fades them out when the input is selected, and hides\n * when the user begins to type.\n */\n'use strict';\n\n(function ($) {\n    $.fn.autoHideLabels = function autoHideLabels(options) {\n        var settings = {\n            label: 'label',\n            input: 'textarea, input:not([type=\"checkbox\"], [type=\"radio\"], [type=\"button\"], [type=\"submit\"], [type=\"reset\"], [type=\"file\"], [type=\"hidden\"])'\n        };\n\n        if (options) {\n            $.extend(settings, options);\n        }\n\n        return $(this).each(function attachHandlers() {\n            var $this = $(this);\n\n            $this.on('focusin', function () {\n                if ($this.find(settings.input).val() === '') {\n                    $this.find(settings.label).fadeTo(100, 0.4);\n                }\n            });\n\n            $this.on('focusout', function () {\n                if ($this.find(settings.input).val() === '') {\n                    $this.find(settings.label).fadeTo(100, 1);\n                }\n            });\n\n            $this.on('input keyup', function () {\n                if ($this.find(settings.input).val() === '') {\n                    $this.find(settings.label).fadeTo(100, 0.4);\n                } else {\n                    $this.find(settings.label).fadeOut(100);\n                }\n            });\n\n            if ($this.find(settings.input).val() !== '') {\n                $this.find(settings.label).hide();\n            }\n        });\n    };\n})(jQuery);\n\n/*\n * Open links to a different domain in a new window\n */\n(function (document, window) {\n    var externalTest = new RegExp('/' + window.location.host + '/');\n    var links = document.getElementsByTagName('a');\n    var length = links.length;\n\n    for (var i = 0; i < length; i++) {\n        if (!externalTest.test(links[i].href)) {\n            links[i].target = '_blank';\n        }\n    }\n})(document, window);\n\n(function ($, document) {\n    var site = {\n        init: function init() {\n            // Run jQuery plugins\n            $('.inplace').autoHideLabels();\n        }\n    };\n\n    // Start things off\n    site.init();\n})(jQuery, document);\n//# sourceMappingURL=scripts.js.map","/**\n * Enables form labels to be overlaid on the inputs\n * Fades them out when the input is selected, and hides\n * when the user begins to type.\n */\n(($) => {\n    $.fn.autoHideLabels = function autoHideLabels(options) {\n        const settings = {\n            label: 'label',\n            input: 'textarea, input:not([type=\"checkbox\"], [type=\"radio\"], [type=\"button\"], [type=\"submit\"], [type=\"reset\"], [type=\"file\"], [type=\"hidden\"])'\n        };\n\n        if (options) {\n            $.extend(settings, options);\n        }\n\n        return $(this).each(function attachHandlers() {\n            const $this = $(this);\n\n            $this.on('focusin', () => {\n                if ($this.find(settings.input).val() === '') {\n                    $this.find(settings.label).fadeTo(100, 0.4);\n                }\n            });\n\n            $this.on('focusout', () => {\n                if ($this.find(settings.input).val() === '') {\n                    $this.find(settings.label).fadeTo(100, 1);\n                }\n            });\n\n            $this.on('input keyup', () => {\n                if ($this.find(settings.input).val() === '') {\n                    $this.find(settings.label).fadeTo(100, 0.4);\n                } else {\n                    $this.find(settings.label).fadeOut(100);\n                }\n            });\n\n            if ($this.find(settings.input).val() !== '') {\n                $this.find(settings.label).hide();\n            }\n        });\n    };\n}(jQuery));\n","/*\n * Open links to a different domain in a new window\n */\n((document, window) => {\n    const externalTest = new RegExp('/' + window.location.host + '/');\n    const links = document.getElementsByTagName('a');\n    const length = links.length;\n\n    for (let i = 0; i < length; i++) {\n        if (!externalTest.test(links[i].href)) {\n            links[i].target = '_blank';\n        }\n    }\n}(document, window));\n","(($, document) => {\n    const site = {\n        init() {\n            // Run jQuery plugins\n            $('.inplace').autoHideLabels();\n        }\n    };\n\n    // Start things off\n    site.init();\n}(jQuery, document));\n"],"sourceRoot":"/source/"}